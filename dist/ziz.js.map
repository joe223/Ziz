{"version":3,"file":null,"sources":["../src/ziz.config.js","../src/parser/space.js","../src/parser/header.js","../src/parser/table.js","../src/parser/code.js","../src/parser/paragraph.js","../src/parser/blockquotes.js","../src/ziz.js"],"sourcesContent":["/**\n * ziz configrue\n */\nexport default {\n    highlightCode: false,           // use highlight.js\n    header: true,                   //\n    table: true,\n    list: true\n};\n","/**\n * space\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let regex = /[\\u0020]/gm;               // ^(?!>#)*[\\u0020]+    |   (^(?!>#)*)?[\\u0020]\n    content = content.replace( regex, \"&nbsp;\");\n    return content;\n};\n","/**\n * header 1~6\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let setextHeader1 = /^(.*)\\r?\\n(={5,})$/gm;                 // setext style header 1\n    let setextHeader2 = /^(.*)\\r?\\n(-{5,})$/gm;                 // setext style header 2\n\n    for ( let i = 6; i >= 1; i-- ) {\n        let atx = `^(#{${i}})([^#].*?)((#{1,})?$)`;          // atx header\n        let regex = new RegExp( atx, \"gm\" );\n        content = content.replace( regex, ( $0, $1, $2, index, str ) => {\n            // console.log($2)\n            return `<h${i}>${$2}</h${i}>`;\n        });\n    }\n    content = content.replace( setextHeader1, ( $0, $1, $2, index, str ) => {\n        return `<h1>${$1}</h1>`;\n    });\n    content = content.replace( setextHeader2, ( $0, $1, $2, index, str) => {\n        return `<h2>${$1}</h2>`;\n    });\n    return content;\n};\n","/**\n * table\n * @return {[type]} [description]\n */\nexport default ( content ) => {\n\n};\n","// ^```(.*|\\n)+?([^`]){3,}```$\n// ^```(.*|\\n)+?([^`]){3,}```$\n\n// /(^[\\u0020]*`{3}([a-zA-z]{3,10})?)(\\n.*?)+`{3}$/gm              // code block with ``` ==> <pre><code> </code><pre>\n// /([\\u0020]*`{3}[^`])(.*?)(`{3})/gm                                  // inline code with ```  ==> <code> <code>\n// /([\\u0020]*`{2}[^`])(.*?)(`{2})/gm                                  // inline code with ``  ==> <code> <code>\n// /([\\u0020]*`[^`])(.*?)(`)/gm                                        // inline code with  ` ==> <code> <code>\n\nexport default ( content ) => {\n    /** convert codeBlock */\n    let regCodeBlock = /(^(&nbsp;)*`{3}([a-zA-z]{3,10})?)((\\n.*?)+)(`{3}$)/gm;\n    let isCode = /\\<code\\>(.*?)\\<\\/code\\>/;\n    let hasLineBreak = /\\r?\\n/;\n    content = content.replace( regCodeBlock, ( $0, $1, $2, $3, $4, $5, $6, index, str ) => {\n        let text = $4;\n        let lang = $3 ? $3.toLowerCase() : \"nohighlight\";               // language\n        text = \"<pre><code class='\" + lang + \"'>\" + text + \"</code></pre>\";\n        return text;\n    });\n    /** inline code with ``` .* ``` */\n    let arr = content.split( /\\n/ );\n    let newContent = \"\";\n    arr.map( ( item, index ) => {\n        console.log(item)\n        for ( let i = 3; i >= 1; i-- ) {\n            let inlineCode = `(\\`{${i}})([^\\`]{1,}.*?[^\\`]*)(\\`{${i}})`;\n            let regex = new RegExp( inlineCode, \"g\" );\n            item = item.replace( regex, ( $0, $1, $2, $3, index, str ) => {\n                let text = $2;\n                if ( !isCode.test( text ) && $2.length > 0 && !hasLineBreak.test( text ) ) {\n                    text = \"<code>\" + text + \"</code>\";\n                    return text;\n                } else {\n                    return $0;\n                }\n            });\n        }\n        item += \"\\n\";\n        newContent += item;\n    });\n    console.log(newContent)\n    return newContent;\n};\n","/**\n * paragraph\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let arr = content.split( /\\n/g );\n    let isHTML = /^<[a-zA-Z0-9]{1,11}(\\s.{1,18})?>.*<\\/[a-zA-Z0-9]{1,11}>$/;      // no globally\n    let isSpace = /^[\\u0020]+|\\r|\\n$/;                                          // space & line break\n    let isCodeStart = /^(<pre>)?<code>$/;\n    let isCodeEnd = /^<\\/code>(<pre>)?/;\n    let newContent = \"\";\n    let status = false;\n    arr.map( ( item, index, arr ) => {\n        // console.log(item);\n        let str = \"\";\n        if ( isCodeStart.test( item ) || status ) {\n            status = true;\n            newContent += ( item + \"\\r\\n\" );\n            return;\n        }\n        if ( isCodeEnd.test( item ) ) {\n            status = false;\n            newContent += ( item + \"\\r\\n\" );\n            return;\n        }\n        // item = item.replace( /\\s/g, \"\" );           // TODO: should keep space\n        if ( !isHTML.test( item ) && !isSpace.test( item ) && item !== \"\" ) {\n            str = `<p>${item}</p>`;\n        } else {\n            str = item;\n        }\n        newContent += str;\n    });\n\n    return newContent;\n};\n","/**\n * Blockquotes (nested)\n * @param  {[type]} content [description]\n * @return {[type]}         [description]s\n */\nexport default ( content ) => {\n    let regex = /(^((&nbsp;)*>+(&nbsp;)*)+)(.*)([^>]$)/gm;         // (^>+(&nbsp;)*)+(.*)([^>]$)\n    content = content.replace( regex, ( $0, $1, $2, $3, $4, $5, index, str ) => {\n        let blockquoteStart = \"<blockquotes>\";\n        let blockquoteEnd = \"</blockquotes>\";\n        let count = 0;\n        let reg = />/g;\n        while ( reg.test( $1 ) ) {\n            count++;\n        }\n        return `${blockquoteStart.repeat( count )}${$5}${blockquoteEnd.repeat( count )}`;\n    });\n    return content;\n};\n","import config from \"./ziz.config\";\nimport space from \"./parser/space\";\nimport header from \"./parser/header\";\nimport table from \"./parser/table\";\nimport code from \"./parser/code\";\nimport paragraph from \"./parser/paragraph\";\nimport blockquotes from \"./parser/blockquotes\";\n\nexport default function Ziz ( content ) {\n    content += \"\\r\\n\";\n    content = space( content );\n    content = header( content );\n    // TODO: fixed table\n    // content = table( content );\n    content = code( content );\n    content = blockquotes ( content );\n    content = paragraph( content );\n    return content;\n}\n"],"names":["content","regex","replace","setextHeader1","setextHeader2","i","atx","RegExp","$0","$1","$2","index","str","regCodeBlock","isCode","hasLineBreak","$3","$4","$5","$6","text","lang","toLowerCase","arr","split","newContent","map","item","log","inlineCode","test","length","isHTML","isSpace","isCodeStart","isCodeEnd","status","blockquoteStart","blockquoteEnd","count","reg","repeat","Ziz","space","header","code","blockquotes","paragraph"],"mappings":"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"}