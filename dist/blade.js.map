{"version":3,"file":null,"sources":["../src/parser/header.js","../src/parser/table.js","../src/parser/paragraph.js","../src/blade.js"],"sourcesContent":["/**\n * header 1~6\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let setextHeader1 = /^(.*)\\r?\\n(={5,})$/gm;                 // setext style header 1\n    let setextHeader2 = /^(.*)\\r?\\n(-{5,})$/gm;                 // setext style header 2\n\n    for ( let i = 6; i >= 1; i-- ) {\n        let atx = `^(#{${i}})([^#].*?)((#{1,})?$)`;          // atx header\n        let regex = new RegExp( atx, \"gm\" );\n        content = content.replace( regex, ( $0, $1, $2, index, str ) => {\n            // console.log($2)\n            return `<h${i}>${$2}</h${i}>`;\n        });\n    }\n    content = content.replace( setextHeader1, ( $0, $1, $2, index, str ) => {\n        return `<h1>${$1}</h1>`;\n    });\n    content = content.replace( setextHeader2, ( $0, $1, $2, index, str) => {\n        return `<h2>${$1}</h2>`;\n    });\n    return content;\n};\n","/**\n * table\n * @return {[type]} [description]\n */\nexport default ( content ) => {\n\n};\n","export default ( content ) => {\n    // let regex = /^.*\\w+$/gm;\n    // content = content.replace( regex, ( $0, $1 ) => {\n    //     return `<p>${$1}</p>`;\n    // });\n    let arr = content.split(/\\n/g);\n    let isHTML = /^<[a-zA-Z0-9]{1,3}(\\s.{1,18})?>.*<\\/[a-zA-Z0-9]{1,3}>$/gm;\n    let isSpace = /^\\s*$/gm;\n    let newContent = \"\";\n    arr.map( ( item, index, arr ) => {\n        // console.log(item);\n        let str = \"\";\n        if ( !isHTML.test( item )  ) { //&& !isSpace.test(item)\n            str = `<p>${item}</p>`;\n        } else {\n            str = item;\n        }\n        console.log(\"item:\" + item);\n        console.log(\"str:\" + str);\n        newContent += str;\n    });\n    return newContent;\n};\n","import config from \"./blade.config\";\nimport header from \"./parser/header\";\nimport table from \"./parser/table\";\nimport paragraph from \"./parser/paragraph\";\nimport space from \"./parser/space\";\n\nexport default ( content ) => {\n    content += \"\\r\\n\";\n    content = header( content );\n    // content = table( content );\n    content = paragraph( content );\n    // content = space( content );\n    return content;\n};\n"],"names":["content","setextHeader1","setextHeader2","i","atx","regex","RegExp","replace","$0","$1","$2","index","str","arr","split","isHTML","isSpace","newContent","map","item","test","log","header","paragraph"],"mappings":";;;;;;AAAA;;;;;AAKA,cAAe,UAAEA,OAAF,EAAe;QACtBC,gBAAgB,sBAApB,CAD0B;QAEtBC,gBAAgB,sBAApB,CAF0B;;+BAIhBC,CAJgB;YAKlBC,eAAaD,CAAb,2BAAJ,CALsB;YAMlBE,QAAQ,IAAIC,MAAJ,CAAYF,GAAZ,EAAiB,IAAjB,CAAZ;kBACUJ,QAAQO,OAAR,CAAiBF,KAAjB,EAAwB,UAAEG,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA8B;;0BAEhDT,CAAZ,SAAiBO,EAAjB,WAAyBP,CAAzB;SAFM,CAAV;;;SAHE,IAAIA,IAAI,CAAd,EAAiBA,KAAK,CAAtB,EAAyBA,GAAzB,EAA+B;cAArBA,CAAqB;;cAQrBH,QAAQO,OAAR,CAAiBN,aAAjB,EAAgC,UAAEO,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA8B;wBACtDH,EAAd;KADM,CAAV;cAGUT,QAAQO,OAAR,CAAiBL,aAAjB,EAAgC,UAAEM,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA6B;wBACrDH,EAAd;KADM,CAAV;WAGOT,OAAP;CAlBJ;;ACLA;;;GAIA;;ACJA,iBAAe,UAAEA,OAAF,EAAe;;;;;QAKtBa,MAAMb,QAAQc,KAAR,CAAc,KAAd,CAAV;QACIC,SAAS,0DAAb;QACIC,UAAU,SAAd;QACIC,aAAa,EAAjB;QACIC,GAAJ,CAAS,UAAEC,IAAF,EAAQR,KAAR,EAAeE,GAAf,EAAwB;;YAEzBD,MAAM,EAAV;YACK,CAACG,OAAOK,IAAP,CAAaD,IAAb,CAAN,EAA6B;;0BACbA,IAAZ;SADJ,MAEO;kBACGA,IAAN;;gBAEIE,GAAR,CAAY,UAAUF,IAAtB;gBACQE,GAAR,CAAY,SAAST,GAArB;sBACcA,GAAd;KAVJ;WAYOK,UAAP;CArBJ;;ACMA,aAAe,UAAEjB,OAAF,EAAe;eACf,MAAX;cACUsB,OAAQtB,OAAR,CAAV;;cAEUuB,UAAWvB,OAAX,CAAV;;WAEOA,OAAP;CANJ;;;;"}