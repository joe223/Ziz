{"version":3,"file":null,"sources":["../src/blade.config.js","../src/parser/space.js","../src/parser/header.js","../src/parser/table.js","../src/parser/paragraph.js","../src/parser/blockquotes.js","../src/blade.js"],"sourcesContent":["/**\n * blade configrue\n */\nexport default {\n    highlightCode: false,           // use highlight.js\n    header: true,                   //\n    table: true,\n    list: true\n};\n","/**\n * space\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let regex = /[\\u0020]/gm;               // ^(?!>#)*[\\u0020]+    |   (^(?!>#)*)?[\\u0020]\n    content = content.replace( regex, \"&nbsp;\");\n    return content;\n};\n","/**\n * header 1~6\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let setextHeader1 = /^(.*)\\r?\\n(={5,})$/gm;                 // setext style header 1\n    let setextHeader2 = /^(.*)\\r?\\n(-{5,})$/gm;                 // setext style header 2\n\n    for ( let i = 6; i >= 1; i-- ) {\n        let atx = `^(#{${i}})([^#].*?)((#{1,})?$)`;          // atx header\n        let regex = new RegExp( atx, \"gm\" );\n        content = content.replace( regex, ( $0, $1, $2, index, str ) => {\n            // console.log($2)\n            return `<h${i}>${$2}</h${i}>`;\n        });\n    }\n    content = content.replace( setextHeader1, ( $0, $1, $2, index, str ) => {\n        return `<h1>${$1}</h1>`;\n    });\n    content = content.replace( setextHeader2, ( $0, $1, $2, index, str) => {\n        return `<h2>${$1}</h2>`;\n    });\n    return content;\n};\n","/**\n * table\n * @return {[type]} [description]\n */\nexport default ( content ) => {\n\n};\n","/**\n * paragraph\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let arr = content.split( /\\n/g );\n    let isHTML = /^<[a-zA-Z0-9]{1,3}(\\s.{1,18})?>.*<\\/[a-zA-Z0-9]{1,3}>$/;      // no globally\n    let isSpace = /^[\\u0020]+|\\r|\\n$/;                                          // space & line break\n    let newContent = \"\";\n\n    arr.map( ( item, index, arr ) => {\n        let str = \"\";\n        item = item.replace( /\\s/g, \"\" );\n        if ( !isHTML.test( item ) && !isSpace.test( item ) && item !== \"\" ) {\n            str = `<p>${item}</p>`;\n        } else {\n            str = item;\n        }\n        newContent += str;\n    });\n\n    return newContent;\n};\n","/**\n * Blockquotes\n * @param  {[type]} content [description]\n * @return {[type]}         [description]s\n */\nexport default ( content ) => {\n    let regex = /(^((&nbsp;)*>+(&nbsp;)*)+)(.*)([^>]$)/gm;         // (^>+(&nbsp;)*)+(.*)([^>]$)\n    console.log(content);\n    content = content.replace( regex, ( $0, $1, $2, $3, $4, $5, index, str ) => {\n        console.log( $5 );\n        let blockquoteStart = \"<blockquotes>\";\n        let blockquoteEnd = \"</blockquotes>\";\n        let count = 0;\n        let reg = />/g;\n        while ( reg.test( $1 ) ) {\n            count++;\n        }\n        return `${blockquoteStart.repeat( count )}${$5}${blockquoteEnd.repeat( count )}`;\n    });\n    return content;\n};\n","import config from \"./blade.config\";\nimport space from \"./parser/space\";\nimport header from \"./parser/header\";\nimport table from \"./parser/table\";\nimport paragraph from \"./parser/paragraph\";\nimport blockquotes from \"./parser/blockquotes\";\n\nexport default ( content ) => {\n    content += \"\\r\\n\";\n    content = space( content );\n    content = header( content );\n    // content = table( content );\n    //\n    content = blockquotes ( content );\n    content = paragraph( content );\n    return content;\n};\n"],"names":["content","regex","replace","setextHeader1","setextHeader2","i","atx","RegExp","$0","$1","$2","index","str","arr","split","isHTML","isSpace","newContent","map","item","test","log","$3","$4","$5","blockquoteStart","blockquoteEnd","count","reg","repeat","space","header","blockquotes","paragraph"],"mappings":";;;;;;AAAA;;GAGA;;ACHA;;;;;AAKA,aAAe,UAAEA,OAAF,EAAe;MACtBC,QAAQ,YAAZ,CAD0B;YAEhBD,QAAQE,OAAR,CAAiBD,KAAjB,EAAwB,QAAxB,CAAV;SACOD,OAAP;CAHJ;;ACLA;;;;;AAKA,cAAe,UAAEA,OAAF,EAAe;QACtBG,gBAAgB,sBAApB,CAD0B;QAEtBC,gBAAgB,sBAApB,CAF0B;;+BAIhBC,CAJgB;YAKlBC,eAAaD,CAAb,2BAAJ,CALsB;YAMlBJ,QAAQ,IAAIM,MAAJ,CAAYD,GAAZ,EAAiB,IAAjB,CAAZ;kBACUN,QAAQE,OAAR,CAAiBD,KAAjB,EAAwB,UAAEO,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA8B;;0BAEhDP,CAAZ,SAAiBK,EAAjB,WAAyBL,CAAzB;SAFM,CAAV;;;SAHE,IAAIA,IAAI,CAAd,EAAiBA,KAAK,CAAtB,EAAyBA,GAAzB,EAA+B;cAArBA,CAAqB;;cAQrBL,QAAQE,OAAR,CAAiBC,aAAjB,EAAgC,UAAEK,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA8B;wBACtDH,EAAd;KADM,CAAV;cAGUT,QAAQE,OAAR,CAAiBE,aAAjB,EAAgC,UAAEI,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcC,KAAd,EAAqBC,GAArB,EAA6B;wBACrDH,EAAd;KADM,CAAV;WAGOT,OAAP;CAlBJ;;ACLA;;;GAIA;;ACJA;;;;;AAKA,iBAAe,UAAEA,OAAF,EAAe;QACtBa,MAAMb,QAAQc,KAAR,CAAe,KAAf,CAAV;QACIC,SAAS,wDAAb,CAF0B;QAGtBC,UAAU,mBAAd,CAH0B;QAItBC,aAAa,EAAjB;;QAEIC,GAAJ,CAAS,UAAEC,IAAF,EAAQR,KAAR,EAAeE,GAAf,EAAwB;YACzBD,MAAM,EAAV;eACOO,KAAKjB,OAAL,CAAc,KAAd,EAAqB,EAArB,CAAP;YACK,CAACa,OAAOK,IAAP,CAAaD,IAAb,CAAD,IAAwB,CAACH,QAAQI,IAAR,CAAcD,IAAd,CAAzB,IAAiDA,SAAS,EAA/D,EAAoE;0BACpDA,IAAZ;SADJ,MAEO;kBACGA,IAAN;;sBAEUP,GAAd;KARJ;;WAWOK,UAAP;CAjBJ;;ACLA;;;;;AAKA,mBAAe,UAAEjB,OAAF,EAAe;QACtBC,QAAQ,yCAAZ,CAD0B;YAElBoB,GAAR,CAAYrB,OAAZ;cACUA,QAAQE,OAAR,CAAiBD,KAAjB,EAAwB,UAAEO,EAAF,EAAMC,EAAN,EAAUC,EAAV,EAAcY,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0Bb,KAA1B,EAAiCC,GAAjC,EAA0C;gBAChES,GAAR,CAAaG,EAAb;YACIC,kBAAkB,eAAtB;YACIC,gBAAgB,gBAApB;YACIC,QAAQ,CAAZ;YACIC,MAAM,IAAV;eACQA,IAAIR,IAAJ,CAAUX,EAAV,CAAR,EAAyB;;;oBAGfgB,gBAAgBI,MAAhB,CAAwBF,KAAxB,CAAV,GAA4CH,EAA5C,GAAiDE,cAAcG,MAAd,CAAsBF,KAAtB,CAAjD;KATM,CAAV;WAWO3B,OAAP;CAdJ;;ACEA,aAAe,UAAEA,OAAF,EAAe;eACf,MAAX;cACU8B,MAAO9B,OAAP,CAAV;cACU+B,OAAQ/B,OAAR,CAAV;;;cAGUgC,YAAchC,OAAd,CAAV;cACUiC,UAAWjC,OAAX,CAAV;WACOA,OAAP;CARJ;;;;"}