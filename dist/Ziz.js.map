{"version":3,"file":null,"sources":["../src/ziz.config.js","../src/parser/escapeSpecialChars.js","../src/parser/del.js","../src/parser/header.js","../src/parser/link.js","../src/parser/list.js","../src/parser/table.js","../src/parser/code.js","../src/parser/paragraph.js","../src/parser/blockquotes.js","../src/ziz.js"],"sourcesContent":["/**\n * ziz configrue\n */\nexport default {\n    highlightCode: false,           // use highlight.js\n    header: true,                   //\n    table: true,\n    list: true,\n    space: false,\n    useNestedList: true,\n};\n","/**\n * escape special chars\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    content = content.replace( /</g, \"&lt;\" );\n    content = content.replace( />/g, \"&gt;\" );\n    // content = content.replace( /&/g, \"&amp;\" );\n    content = content.replace( /\"/g, \"&quot;\" );\n    content = content.replace( /'/g, \"&apos;\" );\n    content = content.replace( /\\\\/g, \"&bsol;\" );\n    content = content.replace( /\\//g, \"&sol;\" );\n    return content;\n};\n","/**\n * Deleted Text Element\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let reg = /~~(?!~)(.*)?~~/m;\n    content = content.replace( reg, ( $0, $1, $2 ) => {\n        return \"<del>\" + $2 + \"</del>\";\n    });\n    return content;\n};\n","/**\n * header 1~6\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let setextHeader1 = /^(.*)\\r?\\n(={5,})$/gm;                 // setext style header 1\n    let setextHeader2 = /^(.*)\\r?\\n(-{5,})$/gm;                 // setext style header 2\n\n    for ( let i = 6; i >= 1; i-- ) {\n        let atx = `^(#{${i}})([^#].*?)((#{1,})?$)`;          // atx header\n        let regex = new RegExp( atx, \"gm\" );\n        content = content.replace( regex, ( $0, $1, $2, index, str ) => {\n            // console.log($2)\n            return `<h${i}>${$2}</h${i}>`;\n        });\n    }\n    content = content.replace( setextHeader1, ( $0, $1, $2, index, str ) => {\n        return `<h1>${$1}</h1>`;\n    });\n    content = content.replace( setextHeader2, ( $0, $1, $2, index, str) => {\n        return `<h2>${$1}</h2>`;\n    });\n    return content;\n};\n","/**\n * link\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    // inline link\n    const inlineLinkRegex = /\\[([^\\[].*?)\\]\\((.*?)((?:\\u0020*)&quot;(.*?)&quot;)?\\)/gm;\n    content = content.replace( inlineLinkRegex, ( $0, $1, $2, $3, $4 ) => {\n        let text = $1;\n        let url = $2;\n        let title = $4;\n        return `<a href=\"${ url }\" title=\"${ title }\">${ text }</a>`;\n    });\n    // TODO: reference style links\n    // console.log( content )\n    return content;\n}\n","/**\n* list\n* @param  {[type]} content [description]\n* @return {[type]}         [description]\n*/\nimport config from \"../ziz.config\";\n\nexport default ( content ) => {\n    let arr = content.split( /\\n/ );\n    let newArr = [];\n    if ( !config.useNestedList ) {\n        newArr = checkListItem( arr, 0, false );\n    } else {\n        newArr = checkListItem( arr, 0, true );\n    }\n    return newArr.join( \"\\n\" );\n};\n\n\n\n\n\nfunction checkListItem ( arr, indent, nested ) {\n    // test \"1. adfsdf\".match(reg)\n    // => [\"1. adfsdf\", \"1.\", \"adfsdf\"] ( string, type, content )\n    const ulStart = \"<ul>\";\n    const ulEnd = \"</ul>\";\n    const olStart = \"<ol>\";\n    const olEnd = \"</ol>\";\n\n    const isItem = /^(?:(?:<ol>|<ul>)?<li>)(.*?)(?:<\\/li>(?:<\\/ol>|<\\/ul>)?)$/;\n    const reg = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})(?:(\\\\*|\\\\+|\\\\-|\\\\d\\\\.)(?:\\\\u0020)+)(.*?)$`, \"mi\" );\n    const testIndentReg = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent + 1 }})(?:(\\\\*|\\\\+|\\\\-|\\\\d\\\\.)(?:\\\\u0020)+)(.*?)$`, \"mi\" );\n    const isUnorderedList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})(([\\\\*|\\\\+|\\\\-])(\\\\u0020)+)(.*?)$`, \"i\" );\n    const isOrderedList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})((^[\\\\d]\\\\.)(\\\\u0020)+)(.*?)$`, \"i\" );\n\n    // if there is an another list\n    if ( testIndentReg.test( arr.join( \"\\n\" ) ) && nested ) {\n        arr = checkListItem( arr, indent + 1 );\n    }\n\n    // unordered list\n    let isFirstListItem = true;\n    let isNestedListStart = true;\n    let length = arr.length;\n    let newArr = arr.map( ( item, index, arr ) => {\n        if ( isUnorderedList.test( item ) ) {\n            item = item.replace( isUnorderedList, ( $0, $1, $2, $3, $4, index, str ) => {\n                return \"<li>\" + $4 + \"</li>\";\n            });\n            if ( isFirstListItem ) {\n                item = ulStart + item;\n            }\n            if ( index === ( length - 1 ) || ( !isUnorderedList.test( arr[index + 1] ) && !isItem.test( arr[index + 1]) ) ) {\n                item = item + ulEnd;\n            }\n            isFirstListItem = false;\n        } else {\n            isFirstListItem = true;\n        }\n        return item;\n    });\n\n    // ordered list\n    isFirstListItem = false;\n    console.log( newArr )\n    newArr = newArr.map( ( item, index, arr ) => {\n        if ( isOrderedList.test( item ) ) {\n            item = item.replace( isOrderedList, ( $0, $1, $2, $3, $4, index, str ) => {\n                return \"<li>\" + $4 + \"</li>\";\n            });\n            if ( !isFirstListItem ) {\n                item = olStart + item;\n            }\n            if ( !arr[index + 1] || ( !isOrderedList.test( arr[index + 1] ) && !isItem.test( arr[index + 1]) ) ) {\n                item = item + olEnd;\n            }\n            isFirstListItem = true;\n        } else {\n            isFirstListItem = false;\n        }\n        return item;\n    });\n    // content = newArr.join(\"\\n\");\n    // return content;\n    newArr = newArr.map( ( item, index, arr ) => {\n        \n    });\n    return newArr;\n}\n\n\n// isUnorderedList = (^(\\t|(\\u0020){4})*)((?:[\\*|\\+|\\-])(?:\\u0020)+)(.*?)$\n//\n//\n//\n// * asdfasdfasdfa是\n// + asdfasdfasdfa2\n// - asdfasdfasdfa1\n//\n// 1. 23123\n// 2. 23123\n//     * asdfasdfasdfa是\n//     + asdfasdfasdfa2\n// \t\t1. 23123\n// \t\t3. 23123\n//     - asdfasdfasdfa1\n// 3. 23123\n//\n//\n// (^(\\t|(\\u0020){4})*)((?:[\\*\\+\\-])(?:\\u0020)+)(.*?)$ // 匹配无序列表，\n","/**\n * table\n */\nexport default ( content ) => {\n    let a = [1,2,3];\n    return content;\n};\n","// ^```(.*|\\n)+?([^`]){3,}```$\n// ^```(.*|\\n)+?([^`]){3,}```$\n\n// /(^\\u0020*`{3}([a-zA-z]{3,10})?)(\\n.*?)+`{3}$/gm                   // code block with ``` ==> <pre><code> </code><pre>\n// /(\\u0020*`{3}[^`])(.*?)(`{3})/gm                                   // inline code with ```  ==> <code> <code>\n// /(\\u0020*`{2}[^`])(.*?)(`{2})/gm                                   // inline code with ``  ==> <code> <code>\n// /(\\u0020*`[^`])(.*?)(`)/gm                                         // inline code with  ` ==> <code> <code>\n\nexport default ( content ) => {\n    /** convert codeBlock */\n    let regCodeBlock = /(^(\\u0020)*`{3}(\\w|\\-|\\.|\\+|\\-{1,10})?)((\\n.*?)+)(`{3}$)/gm;\n    let isCode = /\\<code\\>(.*?)\\<\\/code\\>/;\n    let hasLineBreak = /\\r?\\n/;\n    content = content.replace( regCodeBlock, ( $0, $1, $2, $3, $4, $5, $6, index, str ) => {\n        let text = $4;\n        let lang = $3 ? $3.toLowerCase() : \"nohighlight\";               // language\n        text = \"<pre><code class='\" + lang + \"'>\" + text + \"</code></pre>\";\n        return text;\n    });\n    /** inline code with ``` .* ``` */\n    let arr = content.split( /\\n/ );\n    let newContent = arr.map( ( item, index ) => {\n        for ( let i = 3; i >= 1; i-- ) {\n            let inlineCode = `(\\`{${i}})([^\\`]{1,}.*?[^\\`]*)(\\`{${i}})`;\n            let regex = new RegExp( inlineCode, \"g\" );\n            item = item.replace( regex, ( $0, $1, $2, $3, index, str ) => {\n                let text = $2;\n                if ( !isCode.test( text ) && $2.length > 0 && !hasLineBreak.test( text ) ) {\n                    text = \"<code>\" + text + \"</code>\";\n                    return text;\n                } else {\n                    return $0;\n                }\n            });\n        }\n        return item;\n    });\n    return newContent.join( \"\\n\" );\n};\n","/**\n * paragraph\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let arr = content.split( /\\n/ );\n    let isHTML = /^<[a-zA-Z0-9]{1,11}(\\s.{1,18})?>.*<\\/[a-zA-Z0-9]{1,11}>$/;      // no globally\n    let isSpace = /^\\u0020+|\\r|\\n$/;                                          // space & line break\n    let isCodeStart = /^(<pre>)?<code>$/;\n    let isCodeEnd = /^<\\/code>(<pre>)?/;\n    let status = false;\n    let newContent = arr.map( ( item, index, arr ) => {\n        // console.log(item);\n        let str = \"\";\n        // if ( isCodeStart.test( item ) || status ) {\n        //     status = true;\n        //     newContent += ( item + \"\\r\\n\" );\n        //     return;\n        // }\n        // if ( isCodeEnd.test( item ) ) {\n        //     status = false;\n        //     newContent += ( item + \"\\r\\n\" );\n        //     return;\n        // }\n        // item = item.replace( /\\s/g, \"\" );           // TODO: should keep space\n        if ( !isHTML.test( item ) && !isSpace.test( item ) && item !== \"\" ) {\n            str = `<p>${ item }</p>`;\n        } else {\n            str = item;\n        }\n        return str;\n    });\n    newContent = newContent.join( \"\\n\" );\n    return newContent;\n};\n","/**\n * Blockquotes (nested)\n * @param  {[type]} content [description]\n * @return {[type]}         [description]s\n */\nexport default ( content ) => {\n    let regex = /(^((\\u0020)*>+(\\u0020)*)+)(.*)([^>]$)/gm;         // (^>+(\\u0020)*)+(.*)([^>]$)\n    content = content.replace( regex, ( $0, $1, $2, $3, $4, $5, index, str ) => {\n        let blockquoteStart = \"<blockquotes>\";\n        let blockquoteEnd = \"</blockquotes>\";\n        let count = 0;\n        let reg = />/g;\n        while ( reg.test( $1 ) ) {\n            count++;\n        }\n        return `${blockquoteStart.repeat( count )}${$5}${blockquoteEnd.repeat( count )}`;\n    });\n    return content;\n};\n","import config from \"./ziz.config\";\n// import space from \"./parser/space\";\nimport escapeSpecialChars from \"./parser/escapeSpecialChars\";\nimport del from \"./parser/del\";\nimport header from \"./parser/header\";\nimport link from \"./parser/link\";\nimport list from \"./parser/list\";\nimport table from \"./parser/table\";\nimport code from \"./parser/code\";\nimport paragraph from \"./parser/paragraph\";\nimport blockquotes from \"./parser/blockquotes\";\n\nexport default function Ziz ( content ) {\n    content += \"\\r\\n\";\n    // content = space( content );\n    // TODO: delete space\n    content = escapeSpecialChars( content );\n    // TODO: fix this\n    content = header( content );\n    content = link( content );\n    // TODO: fixed table\n    content = table( content );\n    content = code( content );\n    content = list( content );\n    content = blockquotes ( content );\n    content = del( content );\n    content = paragraph( content );\n    return content;\n}\n"],"names":["content","replace","reg","$0","$1","$2","setextHeader1","setextHeader2","i","atx","regex","RegExp","index","str","inlineLinkRegex","$3","$4","text","url","title","arr","split","newArr","config","useNestedList","checkListItem","join","indent","nested","ulStart","ulEnd","olStart","olEnd","isItem","testIndentReg","isUnorderedList","isOrderedList","test","isFirstListItem","isNestedListStart","length","map","item","log","a","regCodeBlock","isCode","hasLineBreak","$5","$6","lang","toLowerCase","newContent","inlineCode","isHTML","isSpace","isCodeStart","isCodeEnd","status","blockquoteStart","blockquoteEnd","count","repeat","Ziz","escapeSpecialChars","header","link","table","code","list","blockquotes","del","paragraph"],"mappings":"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"}