{"version":3,"file":null,"sources":["../src/ziz.config.js","../src/parser/escapeSpecialChars.js","../src/parser/del.js","../src/parser/italic.js","../src/parser/bold.js","../src/parser/header.js","../src/parser/link.js","../src/parser/list.js","../src/parser/table.js","../src/parser/code.js","../src/parser/paragraph.js","../src/parser/blockquotes.js","../src/ziz.js"],"sourcesContent":["/**\n * ziz configrue\n */\nexport default {\n    highlightCode: false,           // use highlight.js\n    header: true,                   //\n    table: true,\n    list: true,\n    space: false,\n    useNestingList: true,\n};\n","/**\n * escape special chars\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    content = content.replace( /</g, \"&lt;\" );\n    content = content.replace( />/g, \"&gt;\" );\n    // content = content.replace( /&/g, \"&amp;\" );\n    content = content.replace( /\"/g, \"&quot;\" );\n    content = content.replace( /'/g, \"&apos;\" );\n    content = content.replace( /\\\\/g, \"&bsol;\" );\n    content = content.replace( /\\//g, \"&sol;\" );\n    return content;\n};\n","/**\n * Deleted Text Element\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let reg = /~~(?!~)(.*?)~~/m;\n    content = content.replace( reg, ( $0, $1, index, str ) => {\n        return \"<del>\" + $1 + \"</del>\";\n    });\n    return content;\n};\n","/**\n * Deleted Text Element\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\n export default ( content ) => {\n     let reg = /\\*(?!\\*)(.*?)\\*/m;\n     content = content.replace( reg, ( $0, $1, index, str ) => {\n         return \"<em>\" + $1 + \"</em>\";\n     });\n     return content;\n };\n","/**\n * Bold Text Element\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let reg = /\\*\\*(?!\\*)(.*?)\\*\\*/m;\n    content = content.replace( reg, ( $0, $1, index, str ) => {\n        return \"<strong>\" + $1 + \"</strong>\";\n    });\n    return content;\n};\n","/**\n * header 1~6\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let setextHeader1 = /^(.*)\\r?\\n(={5,})$/gm;                 // setext style header 1\n    let setextHeader2 = /^(.*)\\r?\\n(-{5,})$/gm;                 // setext style header 2\n\n    for ( let i = 6; i >= 1; i-- ) {\n        let atx = `^(#{${i}})([^#].*?)((#{1,})?$)`;          // atx header\n        let regex = new RegExp( atx, \"gm\" );\n        content = content.replace( regex, ( $0, $1, $2, index, str ) => {\n            // console.log($2)\n            return `<h${i}>${$2}</h${i}>`;\n        });\n    }\n    content = content.replace( setextHeader1, ( $0, $1, $2, index, str ) => {\n        return `<h1>${$1}</h1>`;\n    });\n    content = content.replace( setextHeader2, ( $0, $1, $2, index, str) => {\n        return `<h2>${$1}</h2>`;\n    });\n    return content;\n};\n","/**\n * link\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    // inline link\n    const inlineLinkRegex = /\\[([^\\[].*?)\\]\\((.*?)((?:\\u0020*)&quot;(.*?)&quot;)?\\)/gm;\n    content = content.replace( inlineLinkRegex, ( $0, $1, $2, $3, $4 ) => {\n        let text = $1;\n        let url = $2;\n        let title = $4;\n        return `<a href=\"${ url }\" title=\"${ title }\">${ text }</a>`;\n    });\n    // TODO: reference style links\n    // console.log( content )\n    return content;\n}\n","/**\n* list\n* @param  {[type]} content [description]\n* @return {[type]}         [description]\n*/\nimport config from \"../ziz.config\";\n\nexport default ( content ) => {\n    let arr = content.split( /\\n/ );\n    let newArr = [];\n    if ( !config.useNestingList ) {\n        newArr = checkListItem( arr, 0, false );\n    } else {\n        newArr = checkListItem( arr, 0, true );\n    }\n    return newArr.join( \"\\n\" );\n};\n\nfunction checkListItem ( arr, indent, nesting ) {\n    // test \"1. adfsdf\".match(reg)\n    // => [\"1. adfsdf\", \"1.\", \"adfsdf\"] ( string, type, content )\n    const ulStart = \"<ul>\";\n    const ulEnd = \"</ul>\";\n    const olStart = \"<ol>\";\n    const olEnd = \"</ol>\";\n\n    const isListItem = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})(?:(?:\\\\*|\\\\+|\\\\-|\\\\d\\\\.)(?:\\\\u0020)+)(.*?)$`, \"mi\" );\n    const hasNestingList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent + 1 }})(?:(\\\\*|\\\\+|\\\\-|\\\\d\\\\.)(?:\\\\u0020)+)(.*?)$`, \"mi\" );\n    const isUnorderedList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})(([\\\\*|\\\\+|\\\\-])(\\\\u0020)+)(.*?)$`, \"mi\" );\n    // const isOrderedList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})((^[\\\\d]\\\\.)(\\\\u0020)+)(.*?)$`, \"i\" );\n    const isOrderedList = new RegExp( `(?:^(?:\\\\t|(?:\\\\u0020){4}){${ indent }})(([\\\\d]\\\\.)(\\\\u0020)+)(.*?)$`, \"mi\" );\n\n    // if there is an another list\n    if ( hasNestingList.test( arr.join( \"\\n\" ) ) && nesting ) {\n        arr = checkListItem( arr, indent + 1, nesting );\n    }\n\n    // unordered list\n    // let isnestingListStart = true;\n    // let length = arr.length;\n\n\n\n    // rebuild\n    let newArr = [];\n    let status = {\n        isFirstListItem: true,\n        type: undefined,\n        itemStr: [],\n        unClosedListItem: false,\n        startTag: \"\",\n        endTag: \"\"\n    }\n    console.log( arr );\n    arr.map( ( item, index, arr ) => {\n        let lastItem = arr[index - 1];\n        let nextItem = arr[index + 1];\n        // status.isFirstListItem = false;\n\n        if ( isListItem.test( item ) ) {\n\n            // if this is a list item,\n            // it should be encased in the <li> tag\n            let li = item.replace( isListItem, ( $0, $1, index, str ) => {\n                return \"<li>\" + $1;\n            });\n\n            // if this is the first item of new list,\n            // add list start tag\n            // console.log( newArr );\n            if ( status.isFirstListItem ) {\n                if ( isOrderedList.test( item ) ) {\n                    status.type = isOrderedList;\n                    status.startTag = olStart;\n                    status.endTag = olEnd;\n                } else {\n                    status.type = isUnorderedList;\n                    status.startTag = ulStart;\n                    status.endTag = ulEnd;\n                }\n\n                li = status.startTag + li;\n                status.isFirstListItem = false;\n            }\n\n            // append the close </li> tag\n            if ( isNestingList( nextItem ) ) {\n                status.unClosedListItem = true;\n            } else {\n                li += \"</li>\";\n            }\n            // status.itemStr += li;\n            status.itemStr.push( li );\n            // console.log( li );\n\n            // whether we should append the list close tag </ol> / </ul>\n            if ( status.type.test( nextItem ) || isNestingList( nextItem ) ) {\n                // TODO:\n            } else {\n                // console.log( status.itemStr );\n                // status.itemStr = status.itemStr + status.endTag;\n                status.itemStr.push( status.endTag );\n                status.isFirstListItem = true;\n            }\n\n        // if this is nesting list && the last item is unclosed\n        } else if ( isNestingList( item ) && status.unClosedListItem ) {\n            // status.itemStr += item;\n            status.itemStr.push( item );\n            // whether wo shoulo append the item close tag </li>\n            if ( isNestingList( nextItem ) ) {\n                // TODO:\n            } else {\n                // if next item is not another nesting list\n                // close the last list item\n                // status.itemStr += \"</li>\";\n                status.itemStr.push( \"</li>\" );\n            }\n            // whether we should append the list close tag </ol> / </ul>\n            if ( status.type.test( nextItem ) || isNestingList( nextItem ) ) {\n                // TODO:\n            } else {\n                // status.itemStr = status.itemStr + status.endTag;\n                status.itemStr.push( status.endTag );\n                status.isFirstListItem = true;\n                status.unClosedListItem = false;    // the list is closed\n            }\n            // status.isFirstListItem = false;\n\n        // reset status object && push itemStr\n        } else {\n            if ( status.itemStr.length ) {\n                newArr.push( status.itemStr.join( \"\" ) );\n            }\n\n            // reset status\n            status.isFirstListItem = true;\n            status.type = undefined;\n            status.itemStr = [];\n            status.unClosedListItem = false;\n            status.startTag = \"\";\n            status.endTag = \"\";\n            newArr.push( item );\n        }\n    });\n    return newArr;\n}\n\n// whether string is nesting list\nfunction isNestingList ( str ) {\n    const isNestingList = /^(?:(?:<ol>|<ul>)?<li>)(.*?)(?:<\\/li>(?:<\\/ol>|<\\/ul>)?)$/mi;      // TODO: fixed this\n    return isNestingList.test( str );\n}\n\nfunction isPlainText ( str ) {\n    const isPlainText = /^$/mi;\n}\n","/**\n * table\n */\nexport default ( content ) => {\n    let a = [1,2,3];\n    return content;\n};\n","export default ( content ) => {\n    /** convert codeBlock */\n    let regCodeBlock = /(^(?:\\u0020)*`{3}((\\w|\\-|\\.|\\+|-|#){1,10})?)((\\n.*?)+)(?:`{3}$)/gm;\n    // let regCodeBlock = /(^(\\u0020)*`{3}(\\w|\\-|\\.|\\+|\\-{1,10})?)((\\n.*?)+)(`{3}$)/gm;\n    let isCode = /\\<code\\>(.*?)\\<\\/code\\>/;\n    let hasLineBreak = /\\r?\\n/;\n    content = content.replace( regCodeBlock, ( $0, $1, $2, $3, $4, $5, index, str ) => {\n        let text = $4;\n        let lang = $2 ? $3.toLowerCase() : \"nohighlight\";               // language\n        text = \"<pre><code class='\" + lang + \"'>\" + text + \"</code></pre>\";\n        return text;\n    });\n    /** inline code with ``` .* ``` */\n    let arr = content.split( /\\n/ );\n    let newContent = arr.map( ( item, index ) => {\n        for ( let i = 3; i >= 1; i-- ) {\n            let inlineCode = `(\\`{${i}})([^\\`]{1,}.*?[^\\`]*)(\\`{${i}})`;\n            let regex = new RegExp( inlineCode, \"g\" );\n            item = item.replace( regex, ( $0, $1, $2, $3, index, str ) => {\n                let text = $2;\n                if ( !isCode.test( text ) && $2.length > 0 && !hasLineBreak.test( text ) ) {\n                    text = \"<code>\" + text + \"</code>\";\n                    return text;\n                } else {\n                    return $0;\n                }\n            });\n        }\n        return item;\n    });\n    return newContent.join( \"\\n\" );\n};\n","/**\n * paragraph\n * @param  {[type]} content [description]\n * @return {[type]}         [description]\n */\nexport default ( content ) => {\n    let arr = content.split( /\\n/ );\n    let isHTML = /^<[a-zA-Z0-9]{1,11}(\\s.{1,18})?>.*<\\/[a-zA-Z0-9]{1,11}>$/;      // no globally\n    let isSpace = /^\\u0020+|\\r|\\n$/;                                          // space & line break\n    let isCodeStart = /^(<pre>)?<code>$/;\n    let isCodeEnd = /^<\\/code>(<pre>)?/;\n    let status = false;\n    let newContent = arr.map( ( item, index, arr ) => {\n        // console.log(item);\n        let str = \"\";\n        // if ( isCodeStart.test( item ) || status ) {\n        //     status = true;\n        //     newContent += ( item + \"\\r\\n\" );\n        //     return;\n        // }\n        // if ( isCodeEnd.test( item ) ) {\n        //     status = false;\n        //     newContent += ( item + \"\\r\\n\" );\n        //     return;\n        // }\n        // item = item.replace( /\\s/g, \"\" );           // TODO: should keep space\n        if ( !isHTML.test( item ) && !isSpace.test( item ) && item !== \"\" ) {\n            str = `<p>${ item }</p>`;\n        } else {\n            str = item;\n        }\n        return str;\n    });\n    newContent = newContent.join( \"\\n\" );\n    return newContent;\n};\n","/**\n * Blockquotes (nested)\n * @param  {[type]} content [description]\n * @return {[type]}         [description]s\n */\nexport default ( content ) => {\n    const regex = /(^((?:\\u0020)*(?:&gt;))+(?:\\u0020)*)+(.*?)$/gm;         // (^>+(\\u0020)*)+(.*)([^>]$)\n    // const regex = /(^((\\u0020)*>+(\\u0020)*)+)(.*)([^>]$)/gm;         // (^>+(\\u0020)*)+(.*)([^>]$)\n    const blockquoteStart = \"<blockquote>\";\n    const blockquoteEnd = \"</blockquote>\";\n    content = content.replace( regex, ( $0, $1, $2, $3, index, str ) => {\n\n        let count = 0;\n        let reg = /&gt;/g;\n        // console.log( $1 );\n        // console.log( $2 );\n        while ( reg.test( $1 ) ) {\n            count++;\n            console.log( \"blockquotes\" );\n        }\n        // console.log( $3 );\n        // console.log( `${blockquoteStart.repeat( count )}${$3}${blockquoteEnd.repeat( count )}` );\n        return `${blockquoteStart.repeat( count )}${$3}${blockquoteEnd.repeat( count )}`;\n    });\n    console.log( content );\n\n    return content;\n};\n","import config from \"./ziz.config\";\n// import space from \"./parser/space\";\nimport escapeSpecialChars from \"./parser/escapeSpecialChars\";\nimport del from \"./parser/del\";\nimport italic from \"./parser/italic\";\nimport bold from \"./parser/bold\";\nimport header from \"./parser/header\";\nimport link from \"./parser/link\";\nimport list from \"./parser/list\";\nimport table from \"./parser/table\";\nimport code from \"./parser/code\";\nimport paragraph from \"./parser/paragraph\";\nimport blockquotes from \"./parser/blockquotes\";\n\nexport default function Ziz ( content ) {\n    content += \"\\r\\n\";\n    // content = space( content );\n    // TODO: delete space\n    content = escapeSpecialChars( content );\n    content = del( content );\n    content = bold( content );\n    content = italic( content );\n    content = code( content );\n    // TODO: fix this\n    content = header( content );\n    content = link( content );\n    // TODO: fixed table\n    content = table( content );\n    content = list( content );\n    content = blockquotes ( content );\n    content = paragraph( content );\n    return content;\n}\n"],"names":["content","replace","reg","$0","$1","index","str","setextHeader1","setextHeader2","i","atx","regex","RegExp","$2","inlineLinkRegex","$3","$4","text","url","title","arr","split","newArr","config","useNestingList","checkListItem","join","indent","nesting","ulStart","ulEnd","olStart","olEnd","isListItem","hasNestingList","isUnorderedList","isOrderedList","test","status","undefined","log","map","item","lastItem","nextItem","li","isFirstListItem","type","startTag","endTag","isNestingList","unClosedListItem","itemStr","push","length","a","regCodeBlock","isCode","hasLineBreak","$5","lang","toLowerCase","newContent","inlineCode","isHTML","isSpace","isCodeStart","isCodeEnd","blockquoteStart","blockquoteEnd","count","repeat","Ziz","escapeSpecialChars","del","bold","italic","code","header","link","table","list","blockquotes","paragraph"],"mappings":"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"}